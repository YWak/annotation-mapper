apply plugin: "java"
apply plugin: "jacoco"
apply plugin: "eclipse"

// 変数定義
def javaVersion = "1.6"
def defaultEncoding = "UTF-8"

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

repositories {
    mavenCentral()
    maven {
        url "http://maven.seasar.org/maven2"
    }
}

sourceSets {
    errorsTest {
        java.srcDir file('src/test/java_errors')
    }
    mapperTest {
        java.srcDir file('src/test/java_mappers')
        output.classesDir = sourceSets.test.output.classesDir
    }
}

configurations {
    all*.exclude group: "commons-logging"
}

dependencies {
    testCompile (
        "junit:junit:4.12",
        "org.seasar.aptina:aptina-unit:1.0.0",
    )

    mapperTestCompile (
        sourceSets.test.output,
        "junit:junit:4.12",
        "org.yaml:snakeyaml:1.17",
    )
}

compileTestJava {
    options.failOnError = false
}

test {
    dependsOn compileMapperTestJava
    reports {
        html {
            enabled = true
            destination = "${buildDir}/reports/tests"
        }
        junitXml {
            enabled = true
            destination = "${buildDir}/test-results/tests"
            outputPerTestCase = false
        }
    }
}

jacocoTestReport {
    reports {
        sourceSets sourceSets.main
        xml {
            enabled = true
            destination = "${buildDir}/test-results/jacoco/coverage.xml"
        }
        html {
            enabled = true
            destination = "${buildDir}/reports/jacoco"
        }
    }
}

check.dependsOn += jacocoTestReport

javadoc {
    options {
        encoding = defaultEncoding
        docEncoding = defaultEncoding
        charSet = defaultEncoding
    }
}

eclipse {
    project {
        file {
            withXml {
                def resources = it.asNode().appendNode("filteredResources")
                def random = new Random()
                def create = { parent, type, arguments ->
                    def filter = parent.appendNode("filter")
                    filter.appendNode("id", System.currentTimeMillis() + random.nextInt())
                    filter.appendNode("type", type)
                    filter.appendNode("name", "")

                    def matcher = filter.appendNode("matcher")
                    matcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
                    matcher.appendNode("arguments", arguments)
                }

                create resources, 10, "1.0-name-matches-false-false-gradle"
                create resources,  6, '1.0-name-matches-false-false-gradlew*'
            }
        }
    }

    classpath {
        plusConfigurations += [ configurations.mapperTestCompile ]
    }
}

eclipseClasspath.dependsOn += cleanEclipseClasspath
eclipseProject.dependsOn += cleanEclipseProject

task wrapper(type: Wrapper) {
    gradleVersion = "2.12"
}
